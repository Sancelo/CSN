@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@using CSN.Models
@using Radzen
@using Radzen.Blazor
@inject dbCSNChatContext dbcontext
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject DialogService DialogService

<RadzenTemplateForm TItem="Appointment" Data="@model" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Title" Style="width: 4rem;" />
            <RadzenTextBox @bind-Value="@model.Text" Name="Text" Style="width: 12rem;" />
            <RadzenRequiredValidator Component="Text" Text="Title is required" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Start" Style="width: 4rem;" />
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" Style="width: 12rem;" />
            <RadzenRequiredValidator Component="Start" Text="Start is required" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="End" Style="width: 4rem;" />
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" Style="width: 12rem;" />
            <RadzenRequiredValidator Component="End" Text="End is required" />
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }

    Appointment model = new Appointment();

    protected override void OnParametersSet()
    {
        model.Start = Start;
        model.End = End;
    }

    async Task OnSubmit(Appointment model)
    {
        if (model.TextId == 0) // New appointment, add it to the database
        {
            dbcontext.Appointments.Add(model); // Add the new appointment to the database
        }
        else // Existing appointment, update it in the database
        {
            dbcontext.Appointments.Update(model); // Update the existing appointment
        }

        await dbcontext.SaveChangesAsync(); // Save changes to the database

        // Close the dialog and pass the updated model back
        DialogService.Close(model);

        // Optionally, you can display a notification that the appointment has been saved
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Thành công", Detail = "Kế hoạch đã được thêm." });
    }
}
